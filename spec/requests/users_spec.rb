# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { role: :admin }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'contains multiple users' do
      user1 = create(:user)
      user2 = create(:user)

      get users_url
      expect(response.parsed_body).to contain_exactly(user1.as_json, user2.as_json)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create! valid_attributes
      get user_url(user), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    it 'has status 200' do
      operator = create(:user, role: :admin)
      post users_path, params: { user: { role: 'general' }, current_user_id: operator.id }
      expect(response).to have_http_status(:ok)
    end

    it 'contains created user' do
      operator = create(:user, role: :admin)
      post users_path, params: { user: { role: 'general' }, current_user_id: operator.id }
      expect(response.parsed_body.deep_symbolize_keys[:user]).to include(
        id: kind_of(Integer),
        role: 'general'
      )
    end

    it 'creates user' do
      operator = create(:user, role: :admin)
      expect do
        post users_path, params: { user: { role: 'general' }, current_user_id: operator.id }
      end.to change(User, :count).by(1)
    end

    it 'requires admin role to operate' do
      operator = create(:user, role: :general)
      post users_path, params: { user: { role: 'general' }, current_user_id: operator.id }
      expect(response).to have_http_status(:forbidden)
    end
  end

  describe 'PATCH /update' do
    it 'has status 200' do
      target_user = create(:user, role: :general)
      operator = create(:user, role: :admin)
      patch user_path(target_user.id), params:
        { user: { user_id: target_user.id, role: 'admin' }, current_user_id: operator.id }
      expect(response).to have_http_status(:ok)
    end

    it 'contains updated user' do
      target_user = create(:user, role: :general)
      operator = create(:user, role: :admin)
      patch user_path(target_user.id), params:
        { user: { user_id: target_user.id, role: 'admin' }, current_user_id: operator.id }
      expect(response.parsed_body.deep_symbolize_keys[:user]).to include(
        id: target_user.id,
        role: 'admin'
      )
    end

    it 'updates user' do
      target_user = create(:user, role: :general)
      operator = create(:user, role: :admin)
      expect do
        patch user_path(target_user.id), params:
          { user: { user_id: target_user.id, role: 'admin' }, current_user_id: operator.id }
      end.to change(target_user, :general).to('admin')
    end

    it 'requires admin role to operate' do
      target_user = create(:user, role: :general)
      operator = create(:user, role: :general)
      patch user_path(target_user.id), params:
        { user: { user_id: target_user.id, role: 'admin' }, current_user_id: operator.id }
      expect(response).to have_http_status(:forbidden)
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested user' do
      user = User.create! valid_attributes
      expect do
        delete user_url(user), headers: valid_headers, as: :json
      end.to change(User, :count).by(-1)
    end
  end
end
